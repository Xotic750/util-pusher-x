{"version":3,"sources":["../src/util-pusher-x.js"],"names":[],"mappings":"AAAA,OAAO,WAAP,MAAwB,gBAAxB;AACA,OAAO,QAAP,MAAqB,WAArB;AAEA,IAAM,YAAY,GAAG,EAArB;IACO,K,GAAS,Y,CAAT,K;AACP,IAAM,QAAQ,GAAG,CAAC,YAAD,CAAjB;;AAEA,IAAM,WAAW,GAAG,SAAS,WAAT,CAAqB,SAArB,EAAgC;AAClD;AACA,SAAO,QAAQ,CAAC,SAAD,CAAR,GAAsB,KAAK,CAAC,KAAN,CAAY,SAAZ,EAAuB,QAAvB,CAAtB,GAAyD,SAAhE;AACD,CAHD,C,CAKA;AACA;;AACA;;;;;;;;AAQA;;;AACA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,SAAhB,EAA2B,IAA3B,EAAiC;AAC9C;AACA,MAAM,MAAM,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,SAAS,CAAC,CAAD,CAAhC,GAAsC,EAArD;;AAEA,MAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,WAAW,CAAC,SAAD,CAAhD,EAA6D;AAC3D,WAAO,MAAP;AACD;;AAED,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAD,CAA5B;AAR8C,MASvC,MATuC,GAS7B,QAT6B,CASvC,MATuC;;AAU9C,OAAK,IAAI,CAAC,GAAG,IAAI,IAAI,CAArB,EAAwB,CAAC,GAAG,MAA5B,EAAoC,CAAC,IAAI,CAAzC,EAA4C;AAC1C,IAAA,MAAM,CAAC,MAAM,CAAC,MAAR,CAAN,GAAwB,SAAS,CAAC,CAAD,CAAjC;AACD;;AAED,SAAO,MAAP;AACD,CAfD;;AAiBA,eAAe,MAAf","file":"util-pusher-x.esm.js","sourcesContent":["import isPrimitive from 'is-primitive-x';\nimport isString from 'is-string';\n\nconst EMPTY_STRING = '';\nconst {split} = EMPTY_STRING;\nconst splitter = [EMPTY_STRING];\n\nconst getIterable = function getIterable(arrayLike) {\n  // noinspection JSUnresolvedFunction\n  return isString(arrayLike) ? split.apply(arrayLike, splitter) : arrayLike;\n};\n\n// eslint-disable jsdoc/no-undefined-types\n// noinspection JSCommentMatchesSignature\n/**\n * This pushes or concatenates into a new or existing array.\n *\n * @param {Array} arrayLike - The source.\n * @param {number} [from=0] - The from source index.\n * @param {Array} [target=[]] - The target array.\n * @returns {*} The target array.\n */\n// eslint-enable jsdoc/no-undefined-types\nconst pusher = function pusher(arrayLike, from) {\n  /* eslint-disable-next-line prefer-rest-params */\n  const target = arguments.length > 2 ? arguments[2] : [];\n\n  if (typeof arrayLike !== 'string' && isPrimitive(arrayLike)) {\n    return target;\n  }\n\n  const iterable = getIterable(arrayLike);\n  const {length} = iterable;\n  for (let i = from || 0; i < length; i += 1) {\n    target[target.length] = arrayLike[i];\n  }\n\n  return target;\n};\n\nexport default pusher;\n"]}